name: Version Check

on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - "pyproject.toml"
      - "src/gimmie/__init__.py"

jobs:
  check-version:
    name: Check Version Increment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Checkout Base Branch
        run: git fetch origin ${{ github.base_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml packaging

      - name: Check Version Increment
        id: version_check
        run: |
          # Create version checking script
          cat > check_version.py << 'EOF'
          import os
          import re
          import sys
          import toml
          from packaging import version

          def get_current_file(file_path, ref):
              """Get file content from a specific git reference"""
              import subprocess
              try:
                  return subprocess.check_output(
                      ["git", "show", f"{ref}:{file_path}"],
                      universal_newlines=True
                  )
              except subprocess.CalledProcessError:
                  print(f"Warning: Could not find {file_path} in {ref}")
                  return ""

          def extract_version_from_init(content):
              """Extract version from __init__.py content"""
              match = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', content)
              if match:
                  return match.group(1)
              return None

          def extract_version_from_pyproject(content):
              """Extract version from pyproject.toml content"""
              try:
                  data = toml.loads(content)
                  return data.get("project", {}).get("version")
              except Exception as e:
                  print(f"Error parsing pyproject.toml: {e}")
                  return None

          def is_valid_increment(old_ver, new_ver):
              """Check if new_ver is a valid increment of old_ver"""
              if not old_ver or not new_ver:
                  return False

              try:
                  old = version.parse(old_ver)
                  new = version.parse(new_ver)

                  # Must be a newer version
                  if new <= old:
                      return False

                  # Check if only one segment increased and others didn't decrease
                  old_parts = [old.major, old.minor, old.micro]
                  new_parts = [new.major, new.minor, new.micro]

                  # Check if major version increased
                  if new_parts[0] > old_parts[0]:
                      # Minor and micro could be reset to 0
                      return True

                  # Major same, check minor
                  if new_parts[1] > old_parts[1]:
                      # Major must be same, micro could be reset to 0
                      return new_parts[0] == old_parts[0]

                  # Major and minor same, check micro
                  if new_parts[2] > old_parts[2]:
                      # Major and minor must be same
                      return new_parts[0] == old_parts[0] and new_parts[1] == old_parts[1]

                  return False

              except Exception as e:
                  print(f"Error comparing versions: {e}")
                  return False

          def main():
              base_ref = os.environ.get("BASE_REF", "origin/main")

              # Get current content
              with open("pyproject.toml", "r") as f:
                  current_pyproject = f.read()

              try:
                  with open("src/gimmie/__init__.py", "r") as f:
                      current_init = f.read()
              except FileNotFoundError:
                  print("Error: __init__.py not found")
                  return 1

              # Get old content
              old_pyproject = get_current_file("pyproject.toml", base_ref)
              old_init = get_current_file("src/gimmie/__init__.py", base_ref)

              # Extract versions
              current_pyproject_version = extract_version_from_pyproject(current_pyproject)
              current_init_version = extract_version_from_init(current_init)
              old_pyproject_version = extract_version_from_pyproject(old_pyproject)
              old_init_version = extract_version_from_init(old_init)

              print(f"Current version in pyproject.toml: {current_pyproject_version}")
              print(f"Current version in __init__.py: {current_init_version}")
              print(f"Old version in pyproject.toml: {old_pyproject_version}")
              print(f"Old version in __init__.py: {old_init_version}")

              # Check if versions match in current files
              if current_pyproject_version != current_init_version:
                  print("Error: Version mismatch between pyproject.toml and __init__.py")
                  return 1

              # If no changes to version, that's also fine
              if current_pyproject_version == old_pyproject_version and current_init_version == old_init_version:
                  print("No version changes detected")
                  return 0

              # Check if new version is a valid increment
              pyproject_valid = is_valid_increment(old_pyproject_version, current_pyproject_version)
              init_valid = is_valid_increment(old_init_version, current_init_version)

              if not pyproject_valid or not init_valid:
                  print("Error: Invalid version increment")
                  print("Valid version increments would be:")

                  if old_pyproject_version:
                      old = version.parse(old_pyproject_version)
                      print(f"  {old.major}.{old.minor}.{old.micro+1} (patch)")
                      print(f"  {old.major}.{old.minor+1}.0 (minor)")
                      print(f"  {old.major+1}.0.0 (major)")

                  return 1

              print("âœ… Version increment is valid")
              return 0

          if __name__ == "__main__":
              sys.exit(main())
          EOF

          # Run the check script
          python check_version.py
          exit_code=$?

          if [ $exit_code -ne 0 ]; then
            echo "::error::Version check failed. See logs for details."
            exit 1
          fi
